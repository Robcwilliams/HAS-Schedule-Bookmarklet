javascript:(function(){console.log('Starting Dashboard Schedule Viewer...');const API_BASE='https://coordinator.iamresponding.com/api';const TIMEZONE_OFFSET=-240;let currentDateOffset=0;const viewerWindow=window.open('','ScheduleViewer','width='+screen.width+',height='+screen.height+',scrollbars=yes,resizable=yes');viewerWindow.document.write('<!DOCTYPE html><html><head><title>7-Day Schedule Viewer</title><style>body{font-family:Arial,sans-serif;margin:0;padding:10px;background:#f5f5f5}.container{width:100%;margin:0;background:white;padding:10px}.status{padding:15px;margin:10px 0;border-radius:5px}.loading{background:#fff3cd;color:#856404}.success{background:#d4edda;color:#155724}.error{background:#f8d7da;color:#721c24}.schedule-table{width:100%;border-collapse:collapse;font-size:10px;margin-top:20px}.schedule-table th,.schedule-table td{border:1px solid #999;padding:4px;text-align:center;vertical-align:top;font-size:10px;line-height:1.2;color:#000}.schedule-table th{background:#f2f2f2;position:sticky;top:0;z-index:10;font-weight:bold;font-size:14px;padding:8px}.time-column{background:#f9f9f9;font-weight:bold;min-width:80px;position:sticky;left:0;z-index:5;font-size:12px;padding:6px}.no-crew{background:#f8d7da;color:#000}.incomplete-crew{background:#fff3cd;color:#000}.valid-crew{background:#d4edda;color:#000}.invalid-crew{background:#e2d9f3;color:#000}.past-time{position:relative}.past-time::after{content:"";position:absolute;top:0;left:0;right:0;bottom:0;background:repeating-linear-gradient(45deg,rgba(0,0,0,0.1) 0px,rgba(0,0,0,0.1) 2px,transparent 2px,transparent 8px);pointer-events:none;z-index:1}.past-time > *{position:relative;z-index:2}.date-header{min-width:100px;font-weight:bold;background:#e9ecef}.legend{background:#e7f3ff;border:1px solid #b3d4fc;padding:15px;border-radius:5px;margin-bottom:20px}.legend span{padding:2px 8px;margin:2px;border-radius:3px}.navigation{background:#f8f9fa;border:1px solid #dee2e6;padding:15px;border-radius:5px;margin-bottom:20px;text-align:center}.nav-button{background:#007cba;color:white;border:none;padding:10px 20px;margin:0 10px;border-radius:4px;cursor:pointer;font-size:14px}.nav-button:hover{background:#005a87}.nav-button:disabled{background:#6c757d;cursor:not-allowed}.date-range{font-weight:bold;margin:0 20px;font-size:16px}</style></head><body><div class="container"><h1>7-Day Schedule Viewer</h1><div id="status" class="status loading">Initializing...</div><div id="content"></div></div></body></html>');const statusDiv=viewerWindow.document.getElementById('status');const contentDiv=viewerWindow.document.getElementById('content');function updateStatus(message,type='loading'){statusDiv.className=`status ${type}`;statusDiv.textContent=message;console.log(message)}function formatTimeInEST(timeString){if(!timeString)return '';try{const date=new Date(timeString);const estOptions={timeZone:'America/New_York',month:'2-digit',day:'2-digit',year:'numeric',hour:'2-digit',minute:'2-digit',hour12:false};return date.toLocaleString('en-US',estOptions)}catch(error){console.warn('Error formatting time:',timeString,error);return timeString}}function generateDates(){const dates=[];const now=new Date();const today=new Date(now.getFullYear(),now.getMonth(),now.getDate());for(let i=0;i<7;i++){const date=new Date(today.getFullYear(),today.getMonth(),today.getDate()+currentDateOffset+i);dates.push(date)}window.debugInfo=`
DEBUG INFO:
- Current time: ${now.toString()}
- Today local date: ${today.toString()} 
- currentDateOffset: ${currentDateOffset}
- System timezone offset: ${now.getTimezoneOffset()} minutes
- Generated dates: ${dates.map(d=>d.toDateString()).join(', ')}
`;return dates}async function fetchDaySchedule(date){const dateStr=date.toISOString().split('T')[0]+'T00:00:00Z';const url=`${API_BASE}/SchedulingReports/GetSchedulingsByDay?schedulingDate=${dateStr}&isReport=true&timeZone=${TIMEZONE_OFFSET}`;try{const response=await fetch(url,{method:'GET',credentials:'include',headers:{'Accept':'application/json','Content-Type':'application/json'}});if(response.ok){const data=await response.json();console.log(`Fetched ${data.length} entries for ${date.toDateString()}`);return data}else{console.error(`Failed to fetch ${date.toDateString()}: ${response.status}`);return null}}catch(error){console.error(`Error fetching ${date.toDateString()}:`,error);return null}}async function fetchAllSchedules(){updateStatus('Fetching 7-day schedule data...');const dates=generateDates();const schedulePromises=dates.map(date=>fetchDaySchedule(date));const schedules=await Promise.all(schedulePromises);const result={};dates.forEach((date,index)=>{const localDateStr=`${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2,'0')}-${date.getDate().toString().padStart(2,'0')}`;result[localDateStr]=schedules[index]||[]});return result}function generateTimeSlots(){const slots=[];for(let hour=0;hour<24;hour++){for(let minute=0;minute<60;minute+=15){slots.push(`${hour.toString().padStart(2,'0')}:${minute.toString().padStart(2,'0')}`)}}return slots}function processSchedules(schedules){const timeSlots=generateTimeSlots();const processed={};Object.keys(schedules).forEach(dateStr=>{processed[dateStr]={}});const sortedDates=Object.keys(schedules).sort();const[firstYear,firstMonth,firstDay]=sortedDates[0].split('-').map(Number);const firstDate=new Date(firstYear,firstMonth-1,firstDay);const[lastYear,lastMonth,lastDay]=sortedDates[sortedDates.length-1].split('-').map(Number);const lastDate=new Date(lastYear,lastMonth-1,lastDay);lastDate.setHours(23,59,59,999);const allPeople=[];Object.entries(schedules).forEach(([dateStr,schedule])=>{schedule.forEach(person=>{if(person.shiftStart&&person.shiftEnd){const onDutyFor=(person.onDutyFor||'').toLowerCase();const location=(person.onDutyAt||'').toLowerCase();if(onDutyFor.includes('unavailable')||location.includes('o.o.t')||onDutyFor.includes('officer on-call')){return}const shiftStart=new Date(person.shiftStart);const shiftEnd=new Date(person.shiftEnd);if(shiftEnd>=firstDate&&shiftStart<=lastDate){allPeople.push(person)}}})});allPeople.forEach(person=>{try{const startTime=new Date(person.shiftStart);const endTime=new Date(person.shiftEnd);const originalStartEST=formatTimeInEST(person.originalShiftStart);const originalEndEST=formatTimeInEST(person.originalShiftEnd);const personData={name:`${person.name||''} ${person.lastName||''}`.trim(),position:person.position||'',onDutyFor:person.onDutyFor||'',location:person.onDutyAt||'',originalStart:originalStartEST,originalEnd:originalEndEST};sortedDates.forEach(dateStr=>{const[year,month,day]=dateStr.split('-').map(Number);const date=new Date(year,month-1,day);timeSlots.forEach(timeSlot=>{const[hour,minute]=timeSlot.split(':').map(Number);const slotTime=new Date(date);slotTime.setHours(hour,minute,0,0);if(slotTime>=startTime&&slotTime<endTime){if(!processed[dateStr][timeSlot]){processed[dateStr][timeSlot]=[]}const alreadyExists=processed[dateStr][timeSlot].some(p=>p.name===personData.name);if(!alreadyExists){processed[dateStr][timeSlot].push(personData)}}})})}catch(error){console.warn('Error processing person:',person,error)}});return processed}function navigateToPrevious(){currentDateOffset-=7;refreshSchedule()}function navigateToNext(){currentDateOffset+=7;refreshSchedule()}function navigateToToday(){currentDateOffset=0;refreshSchedule()}function jumpToNow(){const now=new Date();const currentHour=now.getHours();const currentMinute=now.getMinutes();const roundedMinute=Math.floor(currentMinute/15)*15;const timeSlot=`${currentHour.toString().padStart(2,'0')}:${roundedMinute.toString().padStart(2,'0')}`;const today=new Date(now.getFullYear(),now.getMonth(),now.getDate());const todayDateStr=`${today.getFullYear()}-${(today.getMonth()+1).toString().padStart(2,'0')}-${today.getDate().toString().padStart(2,'0')}`;const targetCell=viewerWindow.document.querySelector(`[data-date="${todayDateStr}"][data-time="${timeSlot}"]`);if(targetCell){targetCell.scrollIntoView({behavior:'smooth',block:'center'});targetCell.style.border='3px solid #007cba';setTimeout(()=>{targetCell.style.border='1px solid #999'},3000)}else{alert('Current time slot not found. Make sure today is visible in the schedule.')}}function showDebug(){alert(window.debugInfo||'Debug info not available')}async function refreshSchedule(){try{updateStatus('Fetching schedule data...');const schedules=await fetchAllSchedules();const processedData=processSchedules(schedules);const tableHtml=generateScheduleTable(schedules,processedData);contentDiv.innerHTML=tableHtml;statusDiv.style.display='none'}catch(error){console.error('Error refreshing schedule:',error);updateStatus(`Error: ${error.message}`,'error')}}function generateScheduleTable(schedules,processedData){const timeSlots=generateTimeSlots();const sortedDates=Object.keys(schedules).sort();const[firstYear,firstMonth,firstDay]=sortedDates[0].split('-').map(Number);const firstDate=new Date(firstYear,firstMonth-1,firstDay);const[lastYear,lastMonth,lastDay]=sortedDates[sortedDates.length-1].split('-').map(Number);const lastDate=new Date(lastYear,lastMonth-1,lastDay);const dateRangeText=`${firstDate.toLocaleDateString('en-US',{month:'short',day:'numeric'})} - ${lastDate.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})}`;let html=`<div class="navigation"><button class="nav-button" onclick="navigateToPrevious()">← Previous 7 Days</button><span class="date-range">${dateRangeText}</span><button class="nav-button" onclick="navigateToNext()">Next 7 Days →</button>${currentDateOffset!==0?'<button class="nav-button" onclick="navigateToToday()" style="margin-left: 20px;">Today</button>':''}<button class="nav-button" onclick="jumpToNow()" style="margin-left: 20px; background: #28a745;">Jump to Now</button><button class="nav-button" onclick="showDebug()" style="margin-left: 20px; background: #dc3545;">Debug</button></div><div class="legend"><h3>Filtered Schedule (EST):</h3><p>Showing only available personnel (excludes Unavailable, O.O.T., and Officer On-Call)</p><p><span class="no-crew">No Crew</span> <span class="incomplete-crew">Incomplete Crew</span> <span class="valid-crew">Valid Crew</span> <span class="invalid-crew">Invalid Crew</span></p><p><em>Past time slots are marked with diagonal stripes</em></p></div><table class="schedule-table"><tr><th class="time-column">Time</th>`;sortedDates.forEach(dateStr=>{const[year,month,day]=dateStr.split('-').map(Number);const date=new Date(year,month-1,day);const dayName=date.toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'});html+=`<th class="date-header">${dayName}</th>`});html+='</tr>';timeSlots.forEach(timeSlot=>{html+=`<tr><td class="time-column">${timeSlot}</td>`;sortedDates.forEach(dateStr=>{const people=processedData[dateStr]?.[timeSlot]||[];const[hour,minute]=timeSlot.split(':').map(Number);const[slotYear,slotMonth,slotDay]=dateStr.split('-').map(Number);const slotDateTime=new Date(slotYear,slotMonth-1,slotDay);slotDateTime.setHours(hour,minute,0,0);const now=new Date();const isPastTime=slotDateTime<now;let cellClass='';if(people.length===0){cellClass='no-crew'}else if(people.length===1){cellClass='incomplete-crew'}else if(people.length===2){const identifiers=people.map(person=>{const nameParts=person.name.split(' - ');return nameParts.length>1?nameParts[nameParts.length-1].trim():''});const bothStartWithR=identifiers.length===2&&identifiers.every(id=>id.startsWith('R'));const allEndWithN=identifiers.length===2&&identifiers.every(id=>id.endsWith('N'));if(bothStartWithR||allEndWithN){cellClass='incomplete-crew'}else{cellClass='valid-crew'}}else if(people.length>4){cellClass='invalid-crew'}else{const hasNonN=people.some(person=>{const nameParts=person.name.split(' - ');if(nameParts.length>1){const identifier=nameParts[nameParts.length-1].trim();return !identifier.endsWith('N')}return true});if(hasNonN){cellClass='valid-crew'}else{cellClass='incomplete-crew'}}if(isPastTime){cellClass+=(cellClass?' past-time':'past-time')}let cellContent='';people.forEach(person=>{if(cellContent)cellContent+='<br><br>';cellContent+=`<strong>${person.name}</strong><br>`;if(person.position)cellContent+=`<small>${person.position}</small><br>`;if(person.onDutyFor&&person.location){cellContent+=`<small>${person.onDutyFor} @ ${person.location}</small><br>`}if(person.originalStart&&person.originalEnd){cellContent+=`<small><em>${person.originalStart} - ${person.originalEnd}</em></small>`}});html+=`<td class="${cellClass}" data-date="${dateStr}" data-time="${timeSlot}">${cellContent}</td>`});html+='</tr>'});html+='</table>';return html}async function main(){try{const schedules=await fetchAllSchedules();updateStatus('Processing schedule data...');const processedData=processSchedules(schedules);const tableHtml=generateScheduleTable(schedules,processedData);contentDiv.innerHTML=tableHtml;statusDiv.style.display='none';const totalEntries=Object.values(schedules).reduce((sum,day)=>sum+day.length,0);console.log(`Generated schedule view with ${totalEntries} total entries across 7 days`)}catch(error){console.error('Error generating schedule:',error);updateStatus(`Error: ${error.message}`,'error')}}viewerWindow.navigateToPrevious=navigateToPrevious;viewerWindow.navigateToNext=navigateToNext;viewerWindow.navigateToToday=navigateToToday;viewerWindow.jumpToNow=jumpToNow;viewerWindow.showDebug=showDebug;main()})();